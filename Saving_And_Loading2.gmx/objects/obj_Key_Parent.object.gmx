<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_General_Button</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//We are gooing to use a parent object for ALL the key remap button controls 
//as the code does not really change between them... only the key they are mapping, 
//which is controlled by variables in the create event of the individual buttons.


//prepare button
image_speed = 0;
image_index = 0;

//Init variables
over = false;
pressed = false;
go = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Reset pressed state
if keyboard_lastkey
{
image_xscale = 1;
image_yscale = 1;
pressed = false;
//reset the controller message
obj_Remap_Control.pressed = -1;
//Now check the key pressed is valid
var nn;
nn = scr_Key_Remap(keyboard_lastkey);
if nn != ""
    {
    //A valid key has been pressed but is it a duplicate?
    var i, good;
    good = true;
    for (i = 0; i &lt; 5; i += 1;)
        {
        //loop through all keys except the current one
        if i != keynum
            {
            //Duplicate found so set the temp var to false
            if global.Key[i] = keyboard_lastkey good = false;
            }
        }
    //Check key
    if good
        {
        //Key is good so map
        global.Key[keynum] = keyboard_lastkey;
        keyname = nn;
        if global.Sound audio_play_sound(snd_Correct, 0, false);
        }
    else
        {
        //Key is a duplicate so don't map
        if global.Sound audio_play_sound(snd_Error, 0, false);
        keyname = oldname;
        } 
    //Permit the keys to work again
    with (obj_Key_Parent) go = true;      
    }
else
    {
    //key is not valid, so no map
    if global.Sound audio_play_sound(snd_Error, 0, false);
    keyname = oldname;
    //Permit the keys to work again
    with (obj_Key_Parent) go = true;  
    }
}
else
{
//Loop the alarm until a key is pressed
alarm[0] = 1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Button Control

//Check for button pressed
if !pressed &amp;&amp; go
{
//no press so check if mouse is over
if mouse_x &gt; bbox_left &amp;&amp; mouse_x &lt; bbox_right &amp;&amp; mouse_y &gt; bbox_top &amp;&amp; mouse_y &lt; bbox_bottom
    {
    //mouse is over, so lets play a sound and set the variable to indicate the situation
    if !over
        {
        if global.Sound audio_play_sound(snd_Button_Over, 0, false);
        over = true;
        }
    //Check for mouse pressed
    if mouse_check_button_pressed(mb_left)
        {
        //Prevent other keys from working
        with (obj_Key_Parent) go = false;
        //Set the variables, play the sound and change the graphics to indicate the press
        pressed = true;
        if global.Sound audio_play_sound(snd_Button_Pressed, 0, false);
        image_xscale = 0.9;
        image_yscale = 0.9;
        //This alarm will reset the button
        alarm[0] = 1;
        //reset the keyboard input too
        io_clear();
        oldname = keyname;
        keyname = "-";
        //Set the controller to draw the correct instructions
        obj_Remap_Control.pressed = keynum;
        }
    }
else
    {
    //mouse is not over so reset the variable
    over = false;
    }
//Set the correct image index for the state of the button
image_index = over;
}
    
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();
draw_text_transformed(x, y, keyname, image_xscale, image_yscale, 0);
draw_text(x, y + 48, keytext);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
